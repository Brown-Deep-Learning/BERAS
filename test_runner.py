#!/usr/bin/env python3
"""
THIS IS THE TESTING FRAMEWORK FOR BERAS! DO NOT EDIT THIS FILE!

Usage:
    python test_runner.py                           # Run all tests
    python test_runner.py --category beras          # Run only beras tests
    python test_runner.py --category data           # Run only data preprocessing tests
    python test_runner.py --category gradient       # Run only gradient tests
    python test_runner.py --category assignment     # Run only assignment tests

    python test_runner.py --test dense_forward      # Run specific test
    python test_runner.py --list                    # List all available tests
    python test_runner.py --verbose                 # Run with verbose output
"""

import argparse
import sys
import traceback
import time
from typing import List, Dict, Callable, Optional
import importlib.util

# TODO: If you add any more test files, add them to this dictionary!
TEST_CATEGORIES = {
    'beras': 'tests.test_beras',
    'data': 'tests.test_data', 
    'gradient': 'tests.test_gradient',
    'assignment': 'tests.test_assignment'
}

TEST_RUNNER_NAME = "[NeuralValidator]"

class TestResult:
    def __init__(self, name: str, category: str, passed: bool, error: Optional[str] = None, duration: float = 0.0):
        self.name = name
        self.category = category
        self.passed = passed
        self.error = error
        self.duration = duration

class TestRunner:
    
    def __init__(self, verbose: bool = False):
        self.verbose = verbose
        self.results: List[TestResult] = []
        
    def discover_tests(self, category: Optional[str] = None) -> Dict[str, List[Callable]]:
        discovered_tests = {}
        
        categories_to_check = [category] if category else list(TEST_CATEGORIES.keys())
        
        for cat in categories_to_check:
            if cat not in TEST_CATEGORIES:
                print(f"{TEST_RUNNER_NAME} Warning: Unknown testing category '{cat}'. Available categories: {list(TEST_CATEGORIES.keys())}")
                continue
                
            try:
                module = __import__(TEST_CATEGORIES[cat], fromlist=[''])
                tests = []
                
                for attr_name in dir(module):
                    if attr_name.startswith('test_') and callable(getattr(module, attr_name)):
                        tests.append(getattr(module, attr_name))
                        
                discovered_tests[cat] = tests
                
            except ImportError as e:
                print(f"{TEST_RUNNER_NAME} Warning: Could not import {TEST_CATEGORIES[cat]}: {e}")
                
        return discovered_tests
    
    def run_test(self, test_func: Callable, category: str) -> TestResult:
        test_name = test_func.__name__
        
        if self.verbose:
            print(f"Running {category}.{test_name}...", end=' ')
            
        start_time = time.time()
        
        try:
            if not self.verbose:
                import io
                import contextlib
                captured_output = io.StringIO()
                with contextlib.redirect_stdout(captured_output):
                    test_func()
            else:
                test_func()
                
            duration = time.time() - start_time
            result = TestResult(test_name, category, True, duration=duration)
            
            if self.verbose:
                print(f"{test_name}: PASSED ({duration:.3f}s)")
            else:
                print(f"{test_name}: PASSED!")
                
        except Exception as e:
            duration = time.time() - start_time
            error_msg = str(e)
            if self.verbose:
                error_msg += "\n" + traceback.format_exc()
                
            result = TestResult(test_name, category, False, error_msg, duration)
            
            if self.verbose:
                print(f"{test_name}: FAILED ({duration:.3f}s)")
                print(f"  Error: {error_msg}")
            else:
                print(f"{test_name}: FAILED!")
                
        return result
    
    def run_tests(self, category: Optional[str] = None, test_name: Optional[str] = None) -> None:
        discovered_tests = self.discover_tests(category)
        
        if not discovered_tests:
            print(f"{TEST_RUNNER_NAME} Warning: No tests found!")
            return
            
        total_tests = 0
        
        for cat, test_funcs in discovered_tests.items():
            if test_name:
                test_funcs = [f for f in test_funcs if f.__name__ == test_name]
                if not test_funcs:
                    continue
                    
            print(f"\n{'='*50}")
            print(f"Running {cat.upper()} tests ({len(test_funcs)} tests)")
            print(f"{'='*50}")
            
            if not self.verbose:
                print(f"{TEST_RUNNER_NAME} Testing Results: ")
                
            for test_func in test_funcs:
                result = self.run_test(test_func, cat)
                self.results.append(result)
                total_tests += 1
                
            if not self.verbose:
                print()
                
        self.print_summary(total_tests)
    
    def print_summary(self, total_tests: int) -> None:
        passed = sum(1 for r in self.results if r.passed)
        failed = total_tests - passed
        total_time = sum(r.duration for r in self.results)
        
        print(f"\n{'='*50}")
        print(f"{TEST_RUNNER_NAME} TEST SUMMARY")
        print(f"{'='*50}")
        print(f"Total tests: {total_tests}")
        print(f"Passed: {passed} :)")
        print(f"Failed: {failed} :(")
        print(f"Total time: {total_time:.3f}s")
        
        if failed > 0:
            print(f"\n{TEST_RUNNER_NAME} FAILED TESTS:")
            print(f"{'-'*30}")
            for result in self.results:
                if not result.passed:
                    print(f"  {result.category}.{result.name}")
                    if not self.verbose:
                        print(f"    Error: {result.error}")
                        
        success_rate = (passed / total_tests * 100) if total_tests > 0 else 0
        print(f"\nSuccess rate: {success_rate:.1f}%")
        
        # Return appropriate exit code
        sys.exit(0 if failed == 0 else 1)
    
    def list_tests(self) -> None:
        discovered_tests = self.discover_tests()
        
        print(f"{TEST_RUNNER_NAME} Available tests:")
        print("="*50)
        
        for category, test_funcs in discovered_tests.items():
            print(f"\n{category.upper()} ({len(test_funcs)} tests):")
            print("-" * 30)
            for test_func in test_funcs:
                doc = test_func.__doc__ or "No description available"
                doc = doc.split('\n')[0].strip()
                print(f"  {test_func.__name__:<25} - {doc}")

def main():
    parser = argparse.ArgumentParser(
        description=f"Neural Validator Testing Framework",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  python test_runner.py                           # Run all tests
  python test_runner.py --category beras          # Run only beras tests  
  python test_runner.py --test dense_forward # Run specific test
  python test_runner.py --list                    # List all tests
  python test_runner.py --verbose                 # Verbose output
        """
    )
    
    parser.add_argument('--category', '-c', 
                       choices=list(TEST_CATEGORIES.keys()),
                       help='Run tests from specific category only')
    
    parser.add_argument('--test', '-t',
                       help='Run a specific test by name')
    
    parser.add_argument('--list', '-l', 
                       action='store_true',
                       help='List all available tests')
    
    parser.add_argument('--verbose', '-v',
                       action='store_true', 
                       help='Enable verbose output')
    
    args = parser.parse_args()
    
    runner = TestRunner(verbose=args.verbose)
    
    if args.list:
        runner.list_tests()
        return
        
    print(f"Neural Validator Testing Framework")
    print("="*50)
    print(f"Running tests for {args.category if args.category else 'all categories'}")
    if args.test and not args.category:
        found = False
        for cat in TEST_CATEGORIES.keys():
            discovered = runner.discover_tests(cat)
            if cat in discovered:
                test_names = [f.__name__ for f in discovered[cat]]
                if args.test in test_names:
                    runner.run_tests(cat, args.test)
                    found = True
                    break
        if not found:
            print(f"{TEST_RUNNER_NAME} Test '{args.test}' not found!")
            sys.exit(1)
    else:
        runner.run_tests(args.category, args.test)

if __name__ == "__main__":
    main()
